package com.fncat.xswipe.controller;

import java.security.SecureRandom;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESKeySpec;

import com.fncat.xswipe.utils.L;

/**
 * DES加密,OK
 * 
 * @author Fncat
 * @data 2014-3-26下午3:33:24
 */
public class DES {
	/**
	 * 加密函数 　　
	 * 
	 * @param data
	 *            加密数据 　　
	 * @param key
	 *            密钥 　　
	 * @return 返回加密后的数据,出错返回null
	 */
	public static byte[] encrypt(byte[] key, byte[] data) {
		try {
			// DES算法要求有一个可信任的随机数源
			SecureRandom sr = new SecureRandom();
			// 从原始密钥数据创建DESKeySpec对象
			DESKeySpec dks = new DESKeySpec(key);
			// 创建一个密匙工厂，然后用它把DESKeySpec转换成一个SecretKey对象
			SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("DES");
			SecretKey secretKey = keyFactory.generateSecret(dks);
			// using DES in ECB mode
			Cipher cipher = Cipher.getInstance("DES/ECB/NoPadding");
			// 用密匙初始化Cipher对象
			cipher.init(Cipher.ENCRYPT_MODE, secretKey, sr);
			// 执行加密操作
			byte encryptedData[] = cipher.doFinal(data);
			return encryptedData;
		} catch (Exception e) {
			L.e("DES算法，加密数据出错！");
		}
		return null;
	}

	/**
	 * 解密函数 　　 　　
	 * 
	 * @param data
	 *            解密数据 　　
	 * @param key
	 *            密钥 　　
	 * @return 返回解密后的数据,出错返回null
	 */
	public static byte[] decrypt(byte[] key, byte[] data) {
		try {
			// DES算法要求有一个可信任的随机数源
			SecureRandom sr = new SecureRandom();
			// 从原始密匙数据创建一个DESKeySpec对象
			DESKeySpec dks = new DESKeySpec(key);
			// 创建一个密匙工厂，然后用它把DESKeySpec对象转换成一个SecretKey对象
			SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("DES");
			SecretKey secretKey = keyFactory.generateSecret(dks);
			// using DES in ECB mode
			Cipher cipher = Cipher.getInstance("DES/ECB/NoPadding");
			// 用密匙初始化Cipher对象
			cipher.init(Cipher.DECRYPT_MODE, secretKey, sr);
			// 正式执行解密操作
			byte decryptedData[] = cipher.doFinal(data);
			return decryptedData;
		} catch (Exception e) {
			L.e("DES算法，解密出错！");
		}
		return null;
	}
}
